#pragma once
#include "Font.h"
#include "DebugDataContainer.h"

struct TextBoxChar
{
	FontChar* font_char = nullptr;
	RectangleOld rect;
	double char_spacing = 0.0;

	Uint8 r_mod = 0;
	Uint8 g_mod = 0;
	Uint8 b_mod = 0;
	Uint8 a_mod = 255;

	DebugDataContainer debug_data_container;

	void InitLeast(RectangleOld* const reference_rect, FontChar* const param_font_char);
	void InitMost(RectangleOld* const reference_rect, FontChar* const param_font_char, const Uint8 param_r_mod, const Uint8 param_g_mod, const Uint8 param_b_mod, const Uint8 param_a_mod);

	void GetRectangleWithSpacing(const bool include_left_spacing, const bool include_right_spacing) const;

	void CreateDebugData(const vector<DebugDataContainer*> param_owner_debug_data_containers, Font* default_debug_data_container_label_font, const char* const param_debug_data_container_label_chars, const vector<int> param_debug_data_container_active_scenes, const bool param_white_list);
};



struct BasicTextBoxChar
{
	// -------------  Metadata  ------------- (note: must be first for constructor ordering)

	const BasicFontChar* font_char_template = nullptr;




	// -------------  Primary Data  -------------

	const Texture* texture = nullptr;

	RefRectangleNewest rect; //Psuedo-private!;  Rotation and scale angles are not supported for this [rect]!;  [rect] is generated by a BasicTextBox when it calls UpdateCharPos() based on the properties of this char and other chars in the text box.
	double space_x = 0.0; //Psuedo-private!;  [space_x] is generated by a BasicTextBox when it calls UpdateCharPos() based on the properties of this char and other chars in the text box.

	char char_value = 0;

	double unscaled_pixel_width = 0.0; //Should usually be set to [texture->width] unless the texture doesn't cover the whole area it is given. DOES change the generated positions of the other letters.
	Scale90 scale; //Should typically be { 1.0, 1.0 }.

	Point2DNew unscaled_pixel_offset; //[pixel_offset] moves the char from its default position, but DOES NOT change the generated positions of any of the other letters. [pixel_offset.x] should almost always equal 0.0, but [pixel_offset.y] is typically nonzero for chars some chars like asterisk and apostrophe. If [pixel_offset.y] is 0.0, then the char is snapped to the bottom edge of its text_box_line.

	double unscaled_pixel_spacing_left = 0.0;
	double unscaled_pixel_spacing_right = 0.0;

	GLColor color_mod = { 0.f, 0.f, 0.f, 1.f };




	// -------------  Functions  -------------
	
	//This is the recommended way to initialize a BasicTextBoxChar. All the member variables from the font_char_template are copied over to this object!
	BasicTextBoxChar(const BasicFontChar* const i_font_char_template);
	BasicTextBoxChar();
	//This is not the recommended way to initialize a BasicTextBoxChar! Initializing with a BasicFontChar template is typically a better idea;  IMPORTANT: Sets [pixel_width] based on the dimentions of the texture. Make sure the texture is loaded before it's pointer is passed to this constructor!
	BasicTextBoxChar(const char i_char_value, const Texture* const i_texture, const double i_unscaled_pixel_spacing_left = 0.0, const double i_unscaled_pixel_spacing_right = 0.0, const Point2DNew i_unscaled_pixel_offset = { 0.0, 0.0 }, const Scale90 i_scale = { 1.0, 1.0 }, const GLColor i_color_mod = { 0.f, 0.f, 0.f, 1.f });
	//This is not the recommended way to initialize a BasicTextBoxChar! Initializing with a BasicFontChar template is typically a better idea;  Sets all member variables to initial values.
	BasicTextBoxChar(const double i_unscaled_pixel_width, const char i_char_value, const Texture* const i_texture, const double i_unscaled_pixel_spacing_left = 0.0, const double i_unscaled_pixel_spacing_right = 0.0, const Point2DNew i_unscaled_pixel_offset = { 0.0, 0.0 }, const Scale90 i_scale = { 1.0, 1.0 }, const GLColor i_color_mod = { 0.f, 0.f, 0.f, 1.f });

	//This is the recommended way to initialize a BasicTextBoxChar. All the member variables from the font_char_template are copied over to this object!
	void Init(const BasicFontChar* const i_font_char_template);
	//This is not the recommended way to initialize a BasicTextBoxChar! Initializing with a BasicFontChar template is typically a better idea;  IMPORTANT: Sets [pixel_width] based on the dimentions of the texture. Make sure the texture is loaded before it's pointer is passed to this method!
	void InitLeast(const char i_char_value, const Texture* const i_texture, const double i_unscaled_pixel_spacing_left = 0.0, const double i_unscaled_pixel_spacing_right = 0.0, const Point2DNew i_unscaled_pixel_offset = { 0.0, 0.0 }, const Scale90 i_scale = { 1.0, 1.0 }, const GLColor i_color_mod = { 0.f, 0.f, 0.f, 1.f });
	//This is not the recommended way to initialize a BasicTextBoxChar! Initializing with a BasicFontChar template is typically a better idea;  Sets all member variables to initial values.
	void InitMost(const double i_unscaled_pixel_width, const char i_char_value, const Texture* const i_texture, const double i_unscaled_pixel_spacing_left = 0.0, const double i_unscaled_pixel_spacing_right = 0.0, const Point2DNew i_unscaled_pixel_offset = { 0.0, 0.0 }, const Scale90 i_scale = { 1.0, 1.0 }, const GLColor i_color_mod = { 0.f, 0.f, 0.f, 1.f });


	double GetScaledPixelWidth() const;
	double GetScaledPixelSpacingLeft() const;
	double GetScaledPixelSpacingRight() const;
	Point2DNew GetScaledPixelOffset() const;
};